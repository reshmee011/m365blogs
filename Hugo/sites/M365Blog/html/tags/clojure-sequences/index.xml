<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Clojure Sequences on m365 blog</title>
    <link>https://famous-cajeta-4dad83.netlify.app/tags/clojure-sequences/</link>
    <description>Recent content in Clojure Sequences on m365 blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 10 Dec 2015 09:32:23 +0000</lastBuildDate><atom:link href="https://famous-cajeta-4dad83.netlify.app/tags/clojure-sequences/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Clojure Sequences</title>
      <link>https://famous-cajeta-4dad83.netlify.app/clojure-sequences/</link>
      <pubDate>Thu, 10 Dec 2015 09:32:23 +0000</pubDate>
      
      <guid>https://famous-cajeta-4dad83.netlify.app/clojure-sequences/</guid>
      <description>Sequences include data structure lists, vectors and lazy sequences. Functions that can be used with sequences can be found using the clojure cheatsheet. http://clojure.org/cheatsheet Below are some examples using vectors and lists as sequences.
Syntax
Definition
Result
(seqÂ &amp;lsquo;(1 2 3 4))
If collection is not empty, return seq object else nil
(1 2 3 4)
(first [1 2 3 4])
returns the first element
1
(rest {:a 1 :b 2 :c 3 :d 4})</description>
    </item>
    
  </channel>
</rss>
