<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Let Clojure Sugar on m365 blog</title>
    <link>https://famous-cajeta-4dad83.netlify.app/tags/let-clojure-sugar/</link>
    <description>Recent content in Let Clojure Sugar on m365 blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 02 Dec 2015 19:06:08 +0000</lastBuildDate><atom:link href="https://famous-cajeta-4dad83.netlify.app/tags/let-clojure-sugar/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Clojure Language Concepts</title>
      <link>https://famous-cajeta-4dad83.netlify.app/clojure-language-concepts/</link>
      <pubDate>Wed, 02 Dec 2015 19:06:08 +0000</pubDate>
      
      <guid>https://famous-cajeta-4dad83.netlify.app/clojure-language-concepts/</guid>
      <description>The post provides a description of some of key concepts and words used in Clojure. Let Let binds symbols to immutable values (let [a 7 b 5] (+ a b) ) The bound symbols are available in lexical scope, i.e. a and b can&amp;rsquo;t be accessed outside. Multi-Arity Function Multi-arity functions is same as overloading methods in C# which means varying number of arguments can be passed to the same function name (defn addNumber ([] (addNumber 2 3)) ([a b] (+ a b))) (addNumber) 5 (addNumber 20 30) 50 Variadic arity Function Variadic arity allows one version of a function with variable number of arguments.</description>
    </item>
    
  </channel>
</rss>
